claim <k> inkeys ( X:MyId in_keys ( .Map  ) ) => inkeysResult ( false ) </k>
claim <k> inkeys ( Y:MyId in_keys ( M:Map ) ) => inkeysResult ( true ) </k> requires Y in_keys(M)
claim <k> inkeys ( Y:MyId in_keys ( M:Map ) ) => inkeysResult ( false ) </k> requires notBool Y in_keys(M)
claim <k> inkeys ( X:MyId in_keys ( M:Map X      |-> 0 ) ) => inkeysResult ( true ) </k>
claim <k> inkeys ( Y:MyId in_keys ( M:Map X:MyId |-> 0 ) ) => fail </k>
claim <k> inkeys ( Y:MyId in_keys ( M:Map X:MyId |-> 0 ) ) => inkeysResult ( true ) </k> requires Y in_keys(M)
claim <k> inkeys ( Y:MyId in_keys ( M:Map X:MyId |-> 0 ) ) => fail </k> requires notBool Y in_keys(M)
claim <k> inkeys ( X:MyId in_keys ( Z:MyId |-> 1 M:Map X      |-> 0 ) ) => inkeysResult ( true ) </k>
claim <k> inkeys ( Y:MyId in_keys ( Z:MyId |-> 1 M:Map X:MyId |-> 0 ) ) => fail  </k>
claim <k> inkeys ( Y:MyId in_keys ( Z:MyId |-> 1 M:Map X:MyId |-> 0 ) ) => inkeysResult ( true ) </k> requires Y in_keys(M)
claim <k> inkeys ( Y:MyId in_keys ( Z:MyId |-> 1 M:Map X:MyId |-> 0 ) ) => inkeysResult ( Y in_keys ( X |-> 0 Z |-> 1 ) ) </k> requires notBool Y in_keys(M)
claim <k> inkeys ( X:MyId in_keys ( M:Map [ X      <- 0 ] ) ) => inkeysResult ( true ) </k>
claim <k> inkeys ( Y:MyId in_keys ( M:Map [ X:MyId <- 0 ] ) ) => fail </k>
claim <k> inkeys ( Y:MyId in_keys ( M:Map [ X:MyId <- 0 ] ) ) => inkeysResult ( true ) </k> requires Y in_keys(M)
claim <k> inkeys ( Y:MyId in_keys ( M:Map [ X:MyId <- 0 ] ) ) => fail </k> requires notBool Y in_keys(M)
claim <k> inkeys ( X:MyId in_keys ( M:Map [ Z:MyId <- 1 ] [ X      <- 0 ] ) ) => inkeysResult ( true ) </k>
claim <k> inkeys ( Y:MyId in_keys ( M:Map [ Z:MyId <- 1 ] [ X:MyId <- 0 ] ) ) => fail </k>
claim <k> inkeys ( Y:MyId in_keys ( M:Map [ Z:MyId <- 1 ] [ X:MyId <- 0 ] ) ) => inkeysResult ( true ) </k> requires Y in_keys(M)
claim <k> inkeys ( Y:MyId in_keys ( M:Map [ Z:MyId <- 1 ] [ X:MyId <- 0 ] ) ) => fail </k> requires notBool Y in_keys(M)
